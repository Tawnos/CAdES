// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

#include "Common.h"

#ifdef REGENERATE_TABLE

struct OidAndPtr
{
    const char* oid;
    const char* varname;
};

OidAndPtr knownOids[] =
{
    {id_at, "id_at"},
    {id_at_surname, "id_at_surname"},
    {id_at_name, "id_at_name"},
    {id_at_givenName, "id_at_givenName"},
    {id_at_initials, "id_at_initials"},
    {id_at_generationQualifier, "id_at_generationQualifier"},
    {id_ce, "id_ce"},
    {id_ce_subjectDirectoryAttributes, "id_ce_subjectDirectoryAttributes"},
    {id_ce_subjectKeyIdentifier, "id_ce_subjectKeyIdentifier"},
    {id_ce_keyUsage, "id_ce_keyUsage"},
    {id_ce_privateKeyUsagePeriod, "id_ce_privateKeyUsagePeriod"},
    {id_ce_subjectAltName, "id_ce_subjectAltName"},
    {id_ce_issuerAltName, "id_ce_issuerAltName"},
    {id_ce_basicConstraints, "id_ce_basicConstraints"},
    {id_ce_cRLNumber, "id_ce_cRLNumber"},
    {id_ce_cRLReasons, "id_ce_cRLReasons"},
    {id_ce_holdInstructionCode, "id_ce_holdInstructionCode"},
    {id_ce_invalidityDate, "id_ce_invalidityDate"},
    {id_ce_deltaCRLIndicator, "id_ce_deltaCRLIndicator"},
    {id_ce_issuingDistributionPoint, "id_ce_issuingDistributionPoint"},
    {id_ce_certificateIssuer, "id_ce_certificateIssuer"},
    {id_ce_nameConstraints, "id_ce_nameConstraints"},
    {id_ce_cRLDistributionPoints, "id_ce_cRLDistributionPoints"},
    {id_ce_certificatePolicies, "id_ce_certificatePolicies"},
    {id_ce_certificatePolicies_anyPolicy, "id_ce_certificatePolicies_anyPolicy"},
    {id_ce_policyMappings, "id_ce_policyMappings"},
    {id_ce_authorityKeyIdentifier, "id_ce_authorityKeyIdentifier"},
    {id_ce_policyConstraints, "id_ce_policyConstraints"},
    {id_ce_extKeyUsage, "id_ce_extKeyUsage"},
    {id_ce_extKeyUsage_any, "id_ce_extKeyUsage_any"},
    {id_ce_freshestCRL, "id_ce_freshestCRL"},
    {id_ce_inhibitAnyPolicy, "id_ce_inhibitAnyPolicy"},
    {id_holdInstruction, "id_holdInstruction"},
    {id_holdInstruction_none, "id_holdInstruction_none"},
    {id_holdInstruction_callissuer, "id_holdInstruction_callissuer"},
    {id_holdInstruction_reject, "id_holdInstruction_reject"},
    {id_pkix, "id_pkix"},
    {id_pe, "id_pe"},
    {id_qt, "id_qt"},
    {id_kp, "id_kp"},
    {id_ad, "id_ad"},
    {id_pe_authorityInfoAccess, "id_pe_authorityInfoAccess"},
    {id_pe_subjectInfoAccess, "id_pe_subjectInfoAccess"},
    {id_qt_cps, "id_qt_cps"},
    {id_qt_unotice, "id_qt_unotice"},
    {id_kp_serverAuth, "id_kp_serverAuth"},
    {id_kp_clientAuth, "id_kp_clientAuth"},
    {id_kp_codeSigning, "id_kp_codeSigning"},
    {id_kp_emailProtection, "id_kp_emailProtection"},
    {id_kp_timeStamping, "id_kp_timeStamping"},
    {id_kp_OCSPSigning, "id_kp_OCSPSigning"},
    {id_ad_ocsp, "id_ad_ocsp"},
    {id_ad_caIssuers, "id_ad_caIssuers"},
    {id_ad_timeStamping, "id_ad_timeStamping"},
    {id_ad_caRepository, "id_ad_caRepository"},
    {pkcs_9, "pkcs_9"},
    {id_emailAddress, "id_emailAddress"},
    {id_data, "id_data"},
    {id_signedData, "id_signedData"},
    {id_contentType, "id_contentType"},
    {id_messageDigest, "id_messageDigest"},
    {id_signingTime, "id_signingTime"},
    {id_countersignature, "id_countersignature"},
    {id_aa_signingCertificate, "id_aa_signingCertificate"},
    {id_aa_signingCertificateV2, "id_aa_signingCertificateV2"},
    {id_md2, "id_md2"},
    {id_md5, "id_md5"},
    {id_sha1, "id_sha1"},
    {id_sha256, "id_sha256"},
    {id_sha384, "id_sha384"},
    {id_sha512, "id_sha512"},
    {id_sha224, "id_sha224"},
    {id_sha512_224, "id_sha512_224"},
    {id_sha512_256, "id_sha512_256"},
    {id_sha3_224, "id_sha3_224"},
    {id_sha3_256, "id_sha3_256"},
    {id_sha3_384, "id_sha3_384"},
    {id_sha3_512, "id_sha3_512"},
    {id_shake_128, "id_shake_128"},
    {id_shake_256, "id_shake_256"},
    {id_pkcs_1, "id_pkcs_1"},
    {id_rsaEncryption, "id_rsaEncryption"},
    {id_md2WithRSAEncryption, "id_md2WithRSAEncryption"},
    {id_md5WithRSAEncryption, "id_md5WithRSAEncryption"},
    {id_sha1WithRSAEncryption, "id_sha1WithRSAEncryption"},
    {id_sha256WithRSAEncryption, "id_sha256WithRSAEncryption"},
    {id_sha384WithRSAEncryption, "id_sha384WithRSAEncryption"},
    {id_sha512WithRSAEncryption, "id_sha512WithRSAEncryption"},
    {id_sha224WithRSAEncryption, "id_sha224WithRSAEncryption"},
    {id_dsa_with_sha1, "id_dsa_with_sha1"},
    {ansi_X9_62, "ansi_X9_62"},
    {id_ecSigType, "id_ecSigType"},
    {id_ecdsa_with_SHA1, "id_ecdsa_with_SHA1"},
    {id_ecdsa_with_SHA224, "id_ecdsa_with_SHA224"},
    {id_ecdsa_with_SHA256, "id_ecdsa_with_SHA256"},
    {id_ecdsa_with_SHA384, "id_ecdsa_with_SHA384"},
    { id_ecdsa_with_SHA512, "id_ecdsa_with_SHA512" }
};


class OidHelper
{
public:
    const char* oid;
    const unsigned char* encodedOid; // ASN.1 encoding
    const char* textOid; // Friendly name
    const char* varName;
};

#include <map>
#include <stdio.h>
void PrintOids()
{
    // This is all terribly inefficient, but is only used
    // to create the structure definition we need
    typedef std::vector<unsigned char> oidBytes;
    std::map<oidBytes, OidHelper> oidMap;
    size_t maxKeylen = 0;
    unsigned char keybuf[12];

    for (size_t i = 0; i < _countof(knownOids); ++i)
    {
        ObjectIdentifier oi;
        oi.SetValue(knownOids[i].oid);

        oidBytes key = oi.GetBytes();
        OidHelper hlp;

        if (key.size() > maxKeylen)
            maxKeylen = key.size();

        hlp.oid = knownOids[i].oid;
        hlp.textOid = nullptr;
        hlp.varName = knownOids[i].varname;

        oidMap[key] = hlp;
    }

    // We now have a sorted map of these
    // Print this out as:
    // { key, variable name },
    // Where key is { 0xaa, 0xbb, 0xcc }
    std::map<oidBytes, OidHelper>::iterator it = oidMap.begin();

    printf("{ \n");
    for (; it != oidMap.end(); ++it)
    {
        const oidBytes& key = (*it).first;
        const OidHelper& oh = (*it).second;

        memset(keybuf, 0, sizeof(keybuf));
        memcpy_s(keybuf, sizeof(keybuf), &key[0], key.size());

        printf("\t{ { 0x%02x, ", (unsigned char)keybuf[0]);
        for (int i = 1; i < sizeof(keybuf) - 1; ++i)
        {
            printf("0x%02x, ", (unsigned char)keybuf[i]);
        }
        printf("0x%02x }, ", (unsigned char)keybuf[sizeof(keybuf) - 1]);
        printf("%s, ", oh.varName);
        printf("\"\" },\n");

    }
    printf("} \n");

 

}
#endif

struct SortedOids
{
    const unsigned char encodedOid[12];
    const char* szOid;
    const char* szOidLabel;
};

SortedOids oidTable[] = 
{
        { { 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00 }, id_pkcs_1, "" },
        { { 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00 }, id_rsaEncryption, "" },
        { { 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x02, 0x00, 0x00, 0x00 }, id_md2WithRSAEncryption, "" },
        { { 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x04, 0x00, 0x00, 0x00 }, id_md5WithRSAEncryption, "" },
        { { 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x05, 0x00, 0x00, 0x00 }, id_sha1WithRSAEncryption, "" },
        { { 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x00, 0x00, 0x00 }, id_sha256WithRSAEncryption, "" },
        { { 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0c, 0x00, 0x00, 0x00 }, id_sha384WithRSAEncryption, "" },
        { { 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0d, 0x00, 0x00, 0x00 }, id_sha512WithRSAEncryption, "" },
        { { 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0e, 0x00, 0x00, 0x00 }, id_sha224WithRSAEncryption, "" },
        { { 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x07, 0x01, 0x00, 0x00, 0x00 }, id_data, "" },
        { { 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x07, 0x02, 0x00, 0x00, 0x00 }, id_signedData, "" },
        { { 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x09, 0x00, 0x00, 0x00, 0x00 }, pkcs_9, "" },
        { { 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x09, 0x01, 0x00, 0x00, 0x00 }, id_emailAddress, "" },
        { { 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x09, 0x03, 0x00, 0x00, 0x00 }, id_contentType, "" },
        { { 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x09, 0x04, 0x00, 0x00, 0x00 }, id_messageDigest, "" },
        { { 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x09, 0x05, 0x00, 0x00, 0x00 }, id_signingTime, "" },
        { { 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x09, 0x06, 0x00, 0x00, 0x00 }, id_countersignature, "" },
        { { 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x09, 0x10, 0x02, 0x0c, 0x00 }, id_aa_signingCertificate, "" },
        { { 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x09, 0x10, 0x02, 0x2f, 0x00 }, id_aa_signingCertificateV2, "" },
        { { 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00 }, id_md2, "" },
        { { 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x02, 0x05, 0x00, 0x00, 0x00, 0x00 }, id_md5, "" },
        { { 0x2a, 0x86, 0x48, 0xce, 0x38, 0x04, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_dsa_with_sha1, "" },
        { { 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, ansi_X9_62, "" },
        { { 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_ecSigType, "" },
        { { 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_ecdsa_with_SHA1, "" },
        { { 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00 }, id_ecdsa_with_SHA224, "" },
        { { 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00 }, id_ecdsa_with_SHA256, "" },
        { { 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00 }, id_ecdsa_with_SHA384, "" },
        { { 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00 }, id_ecdsa_with_SHA512, "" },
        { { 0x2b, 0x06, 0x01, 0x05, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_pkix, "" },
        { { 0x2b, 0x06, 0x01, 0x05, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_pe, "" },
        { { 0x2b, 0x06, 0x01, 0x05, 0x07, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_pe_authorityInfoAccess, "" },
        { { 0x2b, 0x06, 0x01, 0x05, 0x07, 0x01, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_pe_subjectInfoAccess, "" },
        { { 0x2b, 0x06, 0x01, 0x05, 0x07, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_qt, "" },
        { { 0x2b, 0x06, 0x01, 0x05, 0x07, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_qt_cps, "" },
        { { 0x2b, 0x06, 0x01, 0x05, 0x07, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_qt_unotice, "" },
        { { 0x2b, 0x06, 0x01, 0x05, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_kp, "" },
        { { 0x2b, 0x06, 0x01, 0x05, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_kp_serverAuth, "" },
        { { 0x2b, 0x06, 0x01, 0x05, 0x07, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_kp_clientAuth, "" },
        { { 0x2b, 0x06, 0x01, 0x05, 0x07, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_kp_codeSigning, "" },
        { { 0x2b, 0x06, 0x01, 0x05, 0x07, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_kp_emailProtection, "" },
        { { 0x2b, 0x06, 0x01, 0x05, 0x07, 0x03, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_kp_timeStamping, "" },
        { { 0x2b, 0x06, 0x01, 0x05, 0x07, 0x03, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_kp_OCSPSigning, "" },
        { { 0x2b, 0x06, 0x01, 0x05, 0x07, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_ad, "" },
        { { 0x2b, 0x06, 0x01, 0x05, 0x07, 0x30, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_ad_ocsp, "" },
        { { 0x2b, 0x06, 0x01, 0x05, 0x07, 0x30, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_ad_caIssuers, "" },
        { { 0x2b, 0x06, 0x01, 0x05, 0x07, 0x30, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_ad_timeStamping, "" },
        { { 0x2b, 0x06, 0x01, 0x05, 0x07, 0x30, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_ad_caRepository, "" },
        { { 0x2b, 0x0e, 0x03, 0x02, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_sha1, "" },
        { { 0x52, 0x86, 0x48, 0xce, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_holdInstruction, "" },
        { { 0x52, 0x86, 0x48, 0xce, 0x38, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_holdInstruction_none, "" },
        { { 0x52, 0x86, 0x48, 0xce, 0x38, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_holdInstruction_callissuer, "" },
        { { 0x52, 0x86, 0x48, 0xce, 0x38, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_holdInstruction_reject, "" },
        { { 0x55, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_at, "" },
        { { 0x55, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_at_surname, "" },
        { { 0x55, 0x04, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_at_name, "" },
        { { 0x55, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_at_givenName, "" },
        { { 0x55, 0x04, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_at_initials, "" },
        { { 0x55, 0x04, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_at_generationQualifier, "" },
        { { 0x55, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_ce, "" },
        { { 0x55, 0x1d, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_ce_subjectDirectoryAttributes, "" },
        { { 0x55, 0x1d, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_ce_subjectKeyIdentifier, "" },
        { { 0x55, 0x1d, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_ce_keyUsage, "" },
        { { 0x55, 0x1d, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_ce_privateKeyUsagePeriod, "" },
        { { 0x55, 0x1d, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_ce_subjectAltName, "" },
        { { 0x55, 0x1d, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_ce_issuerAltName, "" },
        { { 0x55, 0x1d, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_ce_basicConstraints, "" },
        { { 0x55, 0x1d, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_ce_cRLNumber, "" },
        { { 0x55, 0x1d, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_ce_cRLReasons, "" },
        { { 0x55, 0x1d, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_ce_holdInstructionCode, "" },
        { { 0x55, 0x1d, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_ce_invalidityDate, "" },
        { { 0x55, 0x1d, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_ce_deltaCRLIndicator, "" },
        { { 0x55, 0x1d, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_ce_issuingDistributionPoint, "" },
        { { 0x55, 0x1d, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_ce_certificateIssuer, "" },
        { { 0x55, 0x1d, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_ce_nameConstraints, "" },
        { { 0x55, 0x1d, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_ce_cRLDistributionPoints, "" },
        { { 0x55, 0x1d, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_ce_certificatePolicies, "" },
        { { 0x55, 0x1d, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_ce_certificatePolicies_anyPolicy, "" },
        { { 0x55, 0x1d, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_ce_policyMappings, "" },
        { { 0x55, 0x1d, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_ce_authorityKeyIdentifier, "" },
        { { 0x55, 0x1d, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_ce_policyConstraints, "" },
        { { 0x55, 0x1d, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_ce_extKeyUsage, "" },
        { { 0x55, 0x1d, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_ce_extKeyUsage_any, "" },
        { { 0x55, 0x1d, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_ce_freshestCRL, "" },
        { { 0x55, 0x1d, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, id_ce_inhibitAnyPolicy, "" },
        { { 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00 }, id_sha256, "" },
        { { 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x02, 0x00, 0x00, 0x00 }, id_sha384, "" },
        { { 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x03, 0x00, 0x00, 0x00 }, id_sha512, "" },
        { { 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x04, 0x00, 0x00, 0x00 }, id_sha224, "" },
        { { 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x05, 0x00, 0x00, 0x00 }, id_sha512_224, "" },
        { { 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x06, 0x00, 0x00, 0x00 }, id_sha512_256, "" },
        { { 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x07, 0x00, 0x00, 0x00 }, id_sha3_224, "" },
        { { 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x08, 0x00, 0x00, 0x00 }, id_sha3_256, "" },
        { { 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x09, 0x00, 0x00, 0x00 }, id_sha3_384, "" },
        { { 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x0a, 0x00, 0x00, 0x00 }, id_sha3_512, "" },
        { { 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x0b, 0x00, 0x00, 0x00 }, id_shake_128, "" },
        { { 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x0c, 0x00, 0x00, 0x00 }, id_shake_256, "" },
};

